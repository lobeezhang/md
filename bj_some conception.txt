进程：进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，
是系统进行资源分配和调度的基本单位
进程状态：一般来说，进程有三个状态，即就绪状态，运行状态，阻塞状态。 
 以下两种状态是不可能发生的：
阻塞――>运行：即使给阻塞进程分配CPU，也无法执行，操作系统在进行调度时不会从阻塞队列进行挑选，而是从就绪队列中选取 
就绪――>阻塞：就绪态根本就没有执行，谈不上进入阻塞态。
       
       
同步。异步：关注的是消息通信机制
同步，就是调用某个东西是，调用方得等待这个调用返回结果才能继续往后执行。异步，和同步相反  调用方不会理解得到结果，而是在调用发出后调用者可用继续执行后续操作，被调用者通过状态来通知调用者，或者通过回掉函数来处理这次异步方法执行的结果

阻塞和非阻塞 强调的是程序在等待调用结果（消息，返回值）时的状态.
  阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。 对于同步调用来说，很多时候当前线程还是激活的状态，只是从逻辑上当前函数没有返回而已，即同步等待时什么都不干，白白占用着资源。

同步和异步强调的是消息通信机制
(synchronous communication/ asynchronous communication)。
所谓同步，就是在发出一个"调用"时，在没有得到结果之前，该“调用”就不返回。
但是一旦调用返回，就得到返回值了。
换句话说，就是由“调用者”主动等待这个“调用”的结果。而异步则是相反，"调用"在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在"调用"发出后，"被调用者"通过状态、通知来通知调用者，或通过回调函数处理这个调用

理解同步：主调程序 在调用程序后会一直等待，只到它得到被调程序的结果后，才会继续。此期间，主调程序一直处于running。
理解阻塞调用：与同步的最大区别，就是在等待时不r而是sleeeeeeeeeeeeeeeeeep




并行：同一时刻运行
并发：同一时间段进行



互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。　　
同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。













内存分段好处
cpu中的段寄存器――-段址（base）和偏移值的上限（limit）。

段址：有效地址 中，如果有效地址大于limit，便会引发异常。这样就可以限制程序不能范围当前段外的数据，不能访问其他程序的数据。

面向对象的好处:对象就是一块连续的内存中的数据

寄存器是特殊形式的内存，嵌入到处理器内部。



         每个进程需要访问内存中属于自身的区域，因此，可将内存划分成小的段，按需分发给进程。

寄存器用来存储和跟踪进程当前维护的段。偏移寄存器（Offset Registers）用来跟踪关键的数据放在段中的位置。
在进程被载入内存中时，基本上被分裂成许多小的节（section）。我们比较关注的是6个主要的节：



（1） .text 节



    .text 节基本上相当于二进制可执行文件的.text部分，它包含了完成程序任务的机器指令。

该节标记为只读，如果发生写操作，会造成segmentation fault。在进程最初被加载到内存中开始，该节的大小就被固定。



（2）.data 节



.data节用来存储初始化过的变量，如：int a =0 ; 该节的大小在运行时固定的。



（3）.bss 节



栈下节（below stack section ,即.bss）用来存储为初始化的变量，如：int a; 该节的大小在运行时固定的。



（4） 堆节



堆节（heap section）用来存储动态分配的变量，位置从内存的低地址向高地址增长。内存的分配和释放通过malloc() 和 free() 函数控制。



（5） 栈节



栈节（stack section）用来跟踪函数调用（可能是递归的），在大多数系统上从内存的高地址向低地址增长。

同时，栈这种增长方式，导致了缓冲区溢出的可能性。



（6）环境/参数节



     环境/参数节（environment/arguments section）用来存储系统环境变量的一份复制文件，

进程在运行时可能需要。例如，运行中的进程，可以通过环境变量来访问路径、shell 名称、主机名等信息。

该节是可写的，因此在格式串（format string）和缓冲区溢出（buffer overflow）攻击中都可以使用该节。

另外，命令行参数也保持在该区域中。


